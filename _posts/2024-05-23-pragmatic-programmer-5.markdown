---
layout: post
title: "실용주의 프로그래머 5"
date: 2024-05-23 20:39:01 +0900
categories: [ 독서, 실용주의 프로그래머 ]
---

# 구부러지거나 부러지거나

현대의 빠른 변화 속도를 따라가기 위해서는 느슨하고 유연한 코드를 작성해야 한다.

## 결합도 줄이기

좋은 설계 원칙을 따르면 바꾸기 쉬운 코드(ETC)를 만들 수 있다. 높은 결합도는 당연하게도 변경을 어렵게 만든다. 소프트웨어를 설계할 때는 형태를 유연하게 바꿀 수 있도록
설계해야 한다.

> 결합도가 낮은 코드가 바꾸기 쉽다.

**묻지 말고 말하라**는 원칙이 존재한다. 외부에서 다른 객체의 내부 상태에 따라 판단을 내리고 그 객체를 갱신해서는 안된다는 것이다. 이는 캡슐화의 장점을 위반한다.

```java

customer.orders.find(order_id).getTotals().applyDiscount(discount);

```

이런 코드를 주의해야 한다. 고객의 주문 컬렉션을 가져오고, 주문을 찾아서는 안된다. 주문에 할인은 적용하기 위해 주문의 합을 가져올 필요는 없다.

```java

customer.findOrder(order_id).applyDiscount(discount);

```

그저 적절한 주문을 찾고, 해당 주문에 할인을 적용하는 편이 좋은 캡슐화의 예시이다. 결국 메서드 호출을 엮는 것을 경계해야 한다. 이처럼 함수를 조합하여 파이프라인을 만들고,
파이프라인은 함수에서 함수로 데이터를 변환하며 넘긴다. 파이프라인은 메서드 호출로 이루어진 것과는 다르게 숨겨진 세부 사항에 의존하지 않는다.
<br>
전역 데이터는 애플리케이션 컴포넌트 간의 결합을 만들어낸다. 전역 데이터 하나하나는 애플리케이션의 모든 메서드에 갑자기 매개 변수가 추가된 것과 같은 효과를 낸다.
<br>
만약 우리의 코드가 전역 데이터를 사용한다면, 이 코드는 나머지로부터 그만큼 뗴어내기 힘든 코드이다. 즉 재사용성이 낮다. 전역 데이터를 쓰는 코드에 단위 테스트를 만들면 이런
문제를 확인할 수 있다. 내부적인 변수나 싱글턴 객체의 값 뿐만 아니라 외부 리소스도 전역 데이터다. 이런 전역 데이터의 취급에 주의하며, API 로 감싸서 안전장치를 만들어라.

## 실세계를 갖고 저글링하기

오늘날 우리는 엉망진창인 세계를 반영한 애플리케이션을 만들어야 한다. responsive 한 애플리케이션을 만들기 위해서는 이벤트를 활용해야 한다.

### 이벤트

